<!--Четыре скалярных типа:-->
<!---->
<!--boolean (двоичные данные)-->
<!--integer (целые числа)-->
<!--float (числа с плавающей точкой или 'double')-->
<!--string (строки)-->
<!--Два смешанных типа:-->
<!---->
<!--array (массивы)-->
<!--object (объекты)-->
<!--И два специальных типа:-->
<!---->
<!--resource (ресурсы)-->
<!--NULL ("пустой" тип)-->
<!--Существуют также несколько псевдотипов:-->
<!---->
<!--mixed (смешанный)-->
<!--number (числовой)-->
<!--callback (обратного вызова)-->


<?php


$x = True;  //boolean


$a = 1234; // десятичное число
$a = -123; // отрицательное число
$a = 0123; // восьмеричное число (эквивалентно 83 в десятичной системе)
$a = 0x1A; // шестнадцатеричное число (эквивалентно 26 в десятичной системе)


$a = 1.234;
$b = 1.2e3;
$c = 7E-10;


$a = "Это просто текст, записанный в строковую переменную";
echo $a; //Выводит 'Это просто текст, записанный в строковую переменную'



// Простой способ инициализации массива
$names[0]="Апельсин";
$names[1]="Банан";
$names[2]="Груша";
$names[3]="Помидор";
// Здесь: names - имя массива, а 0, 1, 2, 3 - индексы массива




// Ассоциативный массив
$names["Иванов"]="Иван";
$names["Сидоров"]="Николай";
$names["Петров"]="Петр";
// В данном примере: фамилии - ключи ассоциативного массива
// , а имена - элементы массива




// Многомерный массив
$A["Ivanov"] = array("name"=>"Иванов И.И.", "age"=>"25", "email"=>"ivanov@mail.ru");
$A["Petrov"] = array("name"=>"Петров П.П.", "age"=>"34", "email"=>"petrov@mail.ru");
$A["Sidorov"] = array("name"=>"Сидоров С.С.", "age"=>"47", "email"=>"sidorov@mail.ru");


//Обьект
class foo
{
    function do_foo()
    {
        echo "Doing foo.";
    }
}

$bar = new foo;
$bar->do_foo();


// рессурс



//null
$var = NULL;


//mixed

//gettype(), например, принимает все типы PHP, тогда как str_replace() принимает строки и массивы.


echo "<br>";
// простой пример callback
function my_callback_function() {
    echo 'hello world!';
}
call_user_func('my_callback_function');

// примеры callback-метода
class MyClass {
    function myCallbackMethod() {
        echo 'Hello World!';
    }
}

// вызов метода статического класса без создания объекта
call_user_func(array('MyClass', 'myCallbackMethod'));

// вызов метода объекта
$obj = new MyClass();
call_user_func(array(&$obj, 'myCallbackMethod'));









